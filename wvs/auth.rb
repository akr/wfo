module WVS::Auth
  module_function

  def codeblog_handler(webclient, uri, req, resp)
    unless resp.code == '403' &&
           uri.scheme == 'https' &&
           uri.host == 'www.codeblog.org' &&
           uri.port == 443
      return nil
    end
    apache_authtypekey_handler(webclient, uri, req, resp)
  end

  def apache_authtypekey_handler(webclient, uri, req, resp)
    errpage = resp.body
    return nil if />Log in via TypeKey</ !~ errpage
    # It seems a login page generated by login.pl in Apache-AuthTypeKey.
    typekey_uri = nil
    HTree(errpage).traverse_element("{http://www.w3.org/1999/xhtml}a") {|e|
      if href = e.get_attr('href')
        href = URI(href)
        if href.host == 'www.typekey.com'
          typekey_uri = href
          break
        end
      end
    }
    return nil if !typekey_uri

    resp = typekey_login(webclient, typekey_uri)
    return nil if resp.code != '302'
    #destination_uri = URI(resp['Location'])

    # use uri instead of destination_uri because www.codeblog.org's login.pl
    # had a URI escaping problem.

    req = Net::HTTP::Get.new(uri.request_uri)

    return uri, req
  end

  def typekey_login(webclient, typekey_uri)
    typekey_login_form = nil
    HTree(typekey_uri).traverse_element('{http://www.w3.org/1999/xhtml}form') {|form|
      form = WVS::Form.make(typekey_uri, form)
      if form.has?('username') && form.has?('password')
        typekey_login_form = form
        break
      end
    }
    return nil if !typekey_login_form
    resp = nil
    KeyRing.with_authinfo(KeyRing.typekey_protection_domain) {|username, password|
      typekey_login_form.set('username', username)
      typekey_login_form.set('password', password)
      typekey_login_form.make_request {|req|
        resp = webclient.do_request(typekey_login_form.action_uri, req)
      }
    }
    # The password vanishing is not perfect, unfortunately.
    # arr = []; ObjectSpace.each_object(String) {|s| arr << s }; arr.each {|v| p v }

    if resp.code == '200' # send email address or not?
      email_form = nil
      HTree(resp.body).traverse_element('{http://www.w3.org/1999/xhtml}form') {|form|
        email_form = WVS::Form.make(typekey_login_form.action_uri, form)
        break
      }
      req = email_form.make_request
      resp = webclient.do_request(email_form.action_uri, req)
    end

    return nil if resp.code != '302'
    return_uri = URI(resp['Location'])

    req = Net::HTTP::Get.new(return_uri.request_uri)
    resp = webclient.do_request(return_uri, req)
    resp
  end

end
